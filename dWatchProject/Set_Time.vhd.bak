library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.NUMERIC_std.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Set_Time is
port(
	en : in std_logic; 		--WatchSetEn
	Toggle_HM : in std_logic; --rising_edge toggle  , Dekey 2
	clk : in std_logic;		--inc Pulse
	set_Time : in std_logic; 	--Dekey 4
	OUT_HM : out std_logic_vector (15 downto 0);		-- H10, H1, M10, M1 : real time
	OUT_Set_HM : out std_logic_vector (15 downto 0) -- H10, H1, M10, M1 : set time
	);
end Set_Time;

architecture set of Set_Time is

	component Nbits_Mode is
	generic( N : integer );
	port(
		clk : in std_logic;			--	Input - DeKey1 
		M : out std_logic_vector (N-1 downto 0)	--Mode (00 01 10 11)
		);
	end component;
	
	component register_Nbit is
	generic( N : integer );
	port(
		data_in :in std_logic_vector ( N-1 downto 0 );
		clk :in std_logic;
		data_out : out std_logic_vector ( N-1 downto 0 )
		);
	end component;
	
	signal TS_HorM : std_logic;
	signal Md : std_logic_vector (1 downto 0);
	signal H10, H1, M10, M1 : std_logic_vector (3 downto 0) := (others => '0');				--real time
	signal SH10, SH1, SM10, SM1 : std_logic_vector (3 downto 0) := (others => '0');		--set time
	signal en_set_Time : std_logic;
	signal en_Toggle_HM : std_logic;
	
begin
en_set_Time <= set_Time and en;
en_Toggle_HM <= Toggle_HM and en;
selHM : Nbits_Mode generic map (1) port map(en_Toggle_HM, Md);	
setH10 : register_Nbit generic map (4) port map(H10, en_set_Time, SH10);
setH1 : register_Nbit generic map (4) port map(H1, en_set_Time, SH1);
setM10 : register_Nbit generic map (4) port map(M10, en_set_Time, SM10);
setM1 : register_Nbit generic map (4) port map(M1, en_set_Time, SM1);

TS_HorM <= Md(0);								-- initial '0': Minute 

time_Set : process(clk)
variable HH10, HH1, MM10, MM1 : std_logic_vector (3 downto 0) := "0000";	--time set
variable HH : std_logic_vector (4 downto 0) := "00000";		-- maximum value    ex) maximum_H 23
begin
	if(en='1' and rising_edge(clk))	then
		if(TS_HorM = '0') then
			MM1 := MM1 + "0001"; 
			if(MM1 = "1010") then
				MM1 := "0000"; MM10 := MM10 + "0001";
				if(MM10 = "0110") then
					MM10 := "0000";
				end if;
			end if;
		else
			HH1 := HH1 + "0001";
			HH := HH + "00001";
			if(HH1 = "1010") then
				HH1 := "0000"; HH10 := HH10 + "0001";
			end if;
			if(HH = "11000") then
				HH := "00000"; HH1 := "0000"; HH10 := "0000";
			end if;
		end if;
		H10 <= HH10; H1 <= HH1; M10 <= MM10; M1 <= MM1;	
	end if;
end process time_Set;

OUT_HM (15 downto 12) <= H10;
OUT_HM (11 downto 8) <= H1;
OUT_HM (7 downto 4) <= M10;
OUT_HM (3 downto 0) <= M1;

OUT_Set_HM (15 downto 12) <= SH10;
OUT_Set_HM (11 downto 8) <= sH1;
OUT_Set_HM (7 downto 4) <= SM10;
OUT_Set_HM (3 downto 0) <= SM1;
end set;